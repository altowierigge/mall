name: Frontend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'shop-admin-dashboard/**'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'shop-admin-dashboard/**'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: shop-admin-dashboard/package-lock.json
      
      - name: Install dependencies
        working-directory: shop-admin-dashboard
        run: npm ci
      
      - name: Run linting
        working-directory: shop-admin-dashboard
        run: npm run lint
      
      - name: Run type checking
        working-directory: shop-admin-dashboard
        run: npm run typecheck
      
      - name: Run tests
        working-directory: shop-admin-dashboard
        run: npm test -- --coverage --watchAll=false
        env:
          CI: true
          REACT_APP_API_URL: http://localhost:3001/api/v1
      
      - name: Build application
        working-directory: shop-admin-dashboard
        run: npm run build
        env:
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
          REACT_APP_ENVIRONMENT: production
          GENERATE_SOURCEMAP: false
      
      - name: Run security audit
        working-directory: shop-admin-dashboard
        run: npm audit --audit-level=moderate
      
      - name: Analyze bundle size
        working-directory: shop-admin-dashboard
        run: npm run analyze
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./shop-admin-dashboard/coverage/lcov.info
          directory: ./shop-admin-dashboard/coverage/
          flags: frontend
          name: frontend-coverage
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: shop-admin-dashboard/build/
          retention-days: 7

  lighthouse:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: shop-admin-dashboard/package-lock.json
      
      - name: Install dependencies
        working-directory: shop-admin-dashboard
        run: npm ci
      
      - name: Build application
        working-directory: shop-admin-dashboard
        run: npm run build
        env:
          REACT_APP_API_URL: http://localhost:3001/api/v1
      
      - name: Start static server
        working-directory: shop-admin-dashboard
        run: |
          npm install -g serve
          serve -s build -p 3000 &
          sleep 5
      
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './shop-admin-dashboard/lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./shop-admin-dashboard
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/mall-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/mall-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}
            REACT_APP_ENVIRONMENT=production

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Deploy frontend to production
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            cd /var/www/mall-app/current
            
            # Pull latest frontend image
            docker pull ${{ secrets.DOCKER_USERNAME }}/mall-frontend:latest
            
            # Update frontend service
            docker-compose up -d frontend
            
            # Wait for service to be ready
            sleep 10
            
            # Health check
            curl -f http://localhost:3000 || exit 1
            
            # Cleanup
            docker image prune -f
      
      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow