name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: mall_app_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        working-directory: backend
        run: npm ci
      
      - name: Run linting
        working-directory: backend
        run: npm run lint
      
      - name: Run type checking
        working-directory: backend
        run: npm run typecheck
      
      - name: Run tests
        working-directory: backend
        run: npm test
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: mall_app_test
          DB_USER: test_user
          DB_PASSWORD: test_password
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test_jwt_secret_key_for_testing_only
          JWT_REFRESH_SECRET: test_refresh_secret_key_for_testing_only
      
      - name: Build application
        working-directory: backend
        run: npm run build
      
      - name: Run security audit
        working-directory: backend
        run: npm audit --audit-level=moderate
      
      - name: Generate coverage report
        working-directory: backend
        run: npm run test:coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          directory: ./backend/coverage/
          flags: backend
          name: backend-coverage

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/mall-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/mall-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Create deployment artifact
        run: |
          mkdir -p deployment
          cp docker-compose.yml deployment/
          cp .env.example deployment/
          cp -r backend/src/sql deployment/
          tar -czf deployment-${{ github.sha }}.tar.gz deployment/
      
      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifact
          path: deployment-${{ github.sha }}.tar.gz
          retention-days: 30

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Download deployment artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-artifact
      
      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            # Create deployment directory
            mkdir -p /var/www/mall-app
            cd /var/www/mall-app
            
            # Backup current deployment
            if [ -d "current" ]; then
              mv current backup-$(date +%Y%m%d-%H%M%S)
            fi
            
            # Extract new deployment
            tar -xzf ~/deployment-${{ github.sha }}.tar.gz
            mv deployment current
            
            # Update environment variables
            cp current/.env.example current/.env
            # Note: Update .env with production values using sed or envsubst
            
            # Deploy with Docker Compose
            cd current
            docker-compose pull
            docker-compose down
            docker-compose up -d
            
            # Wait for services to be ready
            sleep 30
            
            # Run database migrations
            docker-compose exec -T backend npm run db:migrate
            
            # Health check
            curl -f http://localhost/api/v1/health || exit 1
            
            # Cleanup old images
            docker image prune -f
      
      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow